import java.util.*;

public class Main {
    static int N, K;
    static int[][] M;
    static boolean[][] visited;
    static int[] dx = {-1, 1, 0, 0}; // 상하좌우 이동
    static int[] dy = {0, 0, -1, 1};

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 입력 받기
        N = sc.nextInt();
        int x = sc.nextInt() - 1; // 1-based index를 0-based로 변환
        int y = sc.nextInt() - 1;

        M = new int[N][N];
        visited = new boolean[N][N];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                M[i][j] = sc.nextInt();
            }
        }

        // 기준 값 K 설정
        K = M[x][y];

        // 최대 그룹 크기 찾기
        int maxSize = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (!visited[i][j] && M[i][j] == K) {
                    maxSize = Math.max(maxSize, bfs(i, j));
                }
            }
        }

        System.out.println(maxSize);
        sc.close();
    }

    // BFS 탐색
    static int bfs(int sx, int sy) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{sx, sy});
        visited[sx][sy] = true;

        int size = 0;
        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            size++;

            for (int d = 0; d < 4; d++) {
                int nx = x + dx[d];
                int ny = y + dy[d];

                if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited[nx][ny] && M[nx][ny] == K) {
                    visited[nx][ny] = true;
                    queue.add(new int[]{nx, ny});
                }
            }
        }
        return size;
    }
}
